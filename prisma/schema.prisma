/* =========================
datasource db {
  provider = "postgresql"
  url      = "file:./dev.db"
}
========================= */

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL") 
}


generator client {
  provider = "prisma-client-js"
}

generator ts {
  provider = "prisma-client-js"
}

/* =========================
   Shared Enums
========================= */

enum Unit {
  PCS
  KG
}

enum StockMode {
  TRACK   // stock tracked (Have Stock)
  RESELL  // no stock tracking (Resell)
}

enum PaymentStatus  { 
  unpaid 
  paid 
  refunded 
}

enum DeliveryStatus { 
  pending 
  delivered 
  failed 
}

/* =========================
   Models
========================= */

model Customer {
  id        String   @id @default(cuid())
  name      String
  address   String?
  whatsapp  String?  @unique
  orders    Order[]
  createdAt DateTime @default(now())

  @@index([name], map: "idx_customer_name")
  @@index([whatsapp], map: "idx_customer_whatsapp")
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())

  items     Item[]
}

model Item {
  id         String    @id @default(cuid())
  name       String

  // selling price per unit/kg (Rp)
  price      Int

  // modal / cost price per unit/kg (Rp)
  costPrice  Int       @default(0)

  // allow fractional stock for KG
  stock      Decimal   @default(0)

  // NEW: how the price is defined
  unit       Unit      @default(PCS)

  // NEW: whether stock is tracked (TRACK) or not (RESELL)
  stockMode  StockMode @default(TRACK)

  // NEW: optional category
  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // back relation to order lines
  OrderItem  OrderItem[]
  SellerOrderItem SellerOrderItem[]

  @@index([categoryId], map: "idx_items_category_id")
  @@index([unit], map: "idx_items_unit")
  @@index([stockMode], map: "idx_items_stock_mode")
}

model Order {
  id          String     @id @default(cuid())
  customerId  String?
  customer    Customer?  @relation(fields: [customerId], references: [id])

  paymentStatus  PaymentStatus  @default(unpaid)
  deliveryStatus DeliveryStatus @default(pending)

  paidAt      DateTime?
  deliveredAt DateTime?

  paymentType String?
  qrisRef     String?

  deliveryNote String?

  subtotal    Int
  discount    Int        @default(0)
  deliveryFee Int        @default(0)
  total       Int

  items       OrderItem[]
  createdAt   DateTime   @default(now())

  @@index([createdAt(sort: Desc)], map: "idx_orders_created_at")
  @@index([paymentStatus], map: "idx_orders_payment_status")
  @@index([deliveryStatus], map: "idx_orders_delivery_status")
  @@index([customerId], map: "idx_orders_customer_id")
  @@index([paymentStatus, createdAt(sort: Desc)], map: "idx_orders_status_date")
  @@index([deliveryStatus, createdAt(sort: Desc)], map: "idx_orders_delivery_date")
}

model Seller {
  id        String   @id @default(cuid())
  name      String
  address   String?
  whatsapp  String?  @unique
  orders    SellerOrder[]
  createdAt DateTime @default(now())

  @@index([name], map: "idx_seller_name")
  @@index([whatsapp], map: "idx_seller_whatsapp")
}

model SellerOrder {
  id          String     @id @default(cuid())
  sellerId    String?
  seller      Seller?    @relation(fields: [sellerId], references: [id])

  paymentStatus  PaymentStatus  @default(unpaid)
  deliveryStatus DeliveryStatus @default(pending)

  paidAt      DateTime?
  deliveredAt DateTime?

  paymentType String?
  deliveryNote String?

  subtotal    Int
  discount    Int        @default(0)
  deliveryFee Int        @default(0)
  total       Int

  items       SellerOrderItem[]
  createdAt   DateTime   @default(now())

  @@index([createdAt(sort: Desc)], map: "idx_seller_orders_created_at")
  @@index([paymentStatus], map: "idx_seller_orders_payment_status")
  @@index([deliveryStatus], map: "idx_seller_orders_delivery_status")
  @@index([sellerId], map: "idx_seller_orders_seller_id")
  @@index([paymentStatus, createdAt(sort: Desc)], map: "idx_seller_orders_status_date")
  @@index([deliveryStatus, createdAt(sort: Desc)], map: "idx_seller_orders_delivery_date")
}

model SellerOrderItem {
  id      String @id @default(cuid())
  orderId String
  itemId  String

  order SellerOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
  item  Item        @relation(fields: [itemId], references: [id])

  qty   Decimal
  price Int

  @@index([orderId], map: "idx_seller_order_items_order_id")
  @@index([itemId], map: "idx_seller_order_items_item_id")
  @@index([orderId, itemId], map: "idx_seller_order_items_composite")
}

model OrderItem {
  id      String @id @default(cuid())
  orderId String
  itemId  String

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  item  Item  @relation(fields: [itemId], references: [id])

  qty   Decimal
  price Int

  @@index([orderId], map: "idx_order_items_order_id")
  @@index([itemId], map: "idx_order_items_item_id")
  @@index([orderId, itemId], map: "idx_order_items_composite")
}
