generator client {
  provider = "prisma-client-js"
}

generator ts {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id        String   @id @default(cuid())
  name      String
  address   String?
  whatsapp  String?  @unique
  createdAt DateTime @default(now())
  orders    Order[]

  @@index([name], map: "idx_customer_name")
  @@index([whatsapp], map: "idx_customer_whatsapp")
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  items     Item[]
}

model Item {
  id              String            @id @default(cuid())
  name            String
  price           Int
  costPrice       Int               @default(0)
  stock           Decimal           @default(0)
  unit            Unit              @default(PCS)
  stockMode       StockMode         @default(TRACK)
  categoryId      String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  category        Category?         @relation(fields: [categoryId], references: [id])
  OrderItem       OrderItem[]
  SellerOrderItem SellerOrderItem[]

  @@index([categoryId], map: "idx_items_category_id")
  @@index([unit], map: "idx_items_unit")
  @@index([stockMode], map: "idx_items_stock_mode")
}

model Order {
  id             String         @id @default(cuid())
  customerId     String?
  paidAt         DateTime?
  deliveredAt    DateTime?
  paymentType    String?
  qrisRef        String?
  deliveryNote   String?
  subtotal       Int
  discount       Int            @default(0)
  total          Int
  createdAt      DateTime       @default(now())
  deliveryStatus DeliveryStatus @default(pending)
  paymentStatus  PaymentStatus  @default(unpaid)
  deliveryFee    Int            @default(0)
  customer       Customer?      @relation(fields: [customerId], references: [id])
  items          OrderItem[]

  @@index([createdAt(sort: Desc)], map: "idx_orders_created_at")
  @@index([paymentStatus], map: "idx_orders_payment_status")
  @@index([deliveryStatus], map: "idx_orders_delivery_status")
  @@index([customerId], map: "idx_orders_customer_id")
  @@index([paymentStatus, createdAt(sort: Desc)], map: "idx_orders_status_date")
  @@index([deliveryStatus, createdAt(sort: Desc)], map: "idx_orders_delivery_date")
}

model Seller {
  id        String        @id @default(cuid())
  name      String
  address   String?
  whatsapp  String?       @unique
  createdAt DateTime      @default(now())
  orders    SellerOrder[]

  @@index([name], map: "idx_seller_name")
  @@index([whatsapp], map: "idx_seller_whatsapp")
}

model SellerOrder {
  id             String            @id @default(cuid())
  sellerId       String?
  paymentStatus  PaymentStatus     @default(unpaid)
  deliveryStatus DeliveryStatus    @default(pending)
  paidAt         DateTime?
  deliveredAt    DateTime?
  paymentType    String?
  deliveryNote   String?
  subtotal       Int
  discount       Int               @default(0)
  deliveryFee    Int               @default(0)
  total          Int
  createdAt      DateTime          @default(now())
  seller         Seller?           @relation(fields: [sellerId], references: [id])
  items          SellerOrderItem[]

  @@index([createdAt(sort: Desc)], map: "idx_seller_orders_created_at")
  @@index([paymentStatus], map: "idx_seller_orders_payment_status")
  @@index([deliveryStatus], map: "idx_seller_orders_delivery_status")
  @@index([sellerId], map: "idx_seller_orders_seller_id")
  @@index([paymentStatus, createdAt(sort: Desc)], map: "idx_seller_orders_status_date")
  @@index([deliveryStatus, createdAt(sort: Desc)], map: "idx_seller_orders_delivery_date")
}

model SellerOrderItem {
  id      String      @id @default(cuid())
  orderId String
  itemId  String
  qty     Decimal
  price   Int
  item    Item        @relation(fields: [itemId], references: [id])
  order   SellerOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId], map: "idx_seller_order_items_order_id")
  @@index([itemId], map: "idx_seller_order_items_item_id")
  @@index([orderId, itemId], map: "idx_seller_order_items_composite")
}

model OrderItem {
  id      String  @id @default(cuid())
  orderId String
  itemId  String
  qty     Decimal
  price   Int
  item    Item    @relation(fields: [itemId], references: [id])
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId], map: "idx_order_items_order_id")
  @@index([itemId], map: "idx_order_items_item_id")
  @@index([orderId, itemId], map: "idx_order_items_composite")
}

enum Unit {
  PCS
  KG
}

enum StockMode {
  TRACK
  RESELL
}

enum PaymentStatus {
  unpaid
  paid
  refunded
}

enum DeliveryStatus {
  pending
  delivered
  failed
}
